// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel_Agency_Api.DataBase;

#nullable disable

namespace Travel_Agency_Api.Migrations
{
    [DbContext(typeof(TravelAgencyContext))]
    partial class TravelAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Travel_Agency_Api.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.OverNightExcursion", b =>
                {
                    b.HasBaseType("Travel_Agency_Api.Models.Services.Excursion");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasIndex("HotelId");

                    b.HasDiscriminator().HasValue("OverNightExcursion");
                });

            modelBuilder.Entity("ExcursionTouristActivity", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.TouristActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Api.Models.Services.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcursionTouristPlace", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Api.Models.Services.TouristPlace", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Offers.ExcursionOffer", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.Excursion", "Excursion")
                        .WithMany("Offers")
                        .HasForeignKey("ExcursionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excursion");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Offers.FlightOffer", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.Flight", "Flight")
                        .WithMany("Offers")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Offers.HotelOffer", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.Hotel", "Hotel")
                        .WithMany("Offers")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.Flight", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.TouristPlace", "Place1")
                        .WithMany()
                        .HasForeignKey("Place1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Api.Models.Services.TouristPlace", "Place2")
                        .WithMany()
                        .HasForeignKey("Place2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place1");

                    b.Navigation("Place2");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.Hotel", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.TouristPlace", "TouristPlace")
                        .WithMany("Hotels")
                        .HasForeignKey("TouristPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristPlace");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.TouristPlace", b =>
                {
                    b.OwnsOne("Travel_Agency_Api.Models.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TouristPlaceId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("TouristPlaceId");

                            b1.ToTable("TouristPlaces");

                            b1.WithOwner()
                                .HasForeignKey("TouristPlaceId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.OverNightExcursion", b =>
                {
                    b.HasOne("Travel_Agency_Api.Models.Services.Hotel", "Hotel")
                        .WithMany("OverNightExcursions")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.Excursion", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.Flight", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.Hotel", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("OverNightExcursions");
                });

            modelBuilder.Entity("Travel_Agency_Api.Models.Services.TouristPlace", b =>
                {
                    b.Navigation("Hotels");
                });
#pragma warning restore 612, 618
        }
    }
}
