// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel_Agency_DataBase;

#nullable disable

namespace Travel_Agency_DataBase.Migrations
{
    [DbContext(typeof(TravelAgencyContext))]
    partial class TravelAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExcursionHotel", b =>
                {
                    b.Property<Guid>("HotelsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OverNightExcursionsId")
                        .HasColumnType("char(36)");

                    b.HasKey("HotelsId", "OverNightExcursionsId");

                    b.HasIndex("OverNightExcursionsId");

                    b.ToTable("ExcursionHotel");
                });

            modelBuilder.Entity("ExcursionOfferPackage", b =>
                {
                    b.Property<Guid>("ExcursionOffersId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("char(36)");

                    b.HasKey("ExcursionOffersId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("ExcursionOfferPackage");
                });

            modelBuilder.Entity("ExcursionTouristActivity", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExcursionsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ActivitiesId", "ExcursionsId");

                    b.HasIndex("ExcursionsId");

                    b.ToTable("ExcursionTouristActivity");
                });

            modelBuilder.Entity("ExcursionTouristPlace", b =>
                {
                    b.Property<Guid>("ExcursionsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlacesId")
                        .HasColumnType("char(36)");

                    b.HasKey("ExcursionsId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("ExcursionTouristPlace");
                });

            modelBuilder.Entity("FacilityOffer", b =>
                {
                    b.Property<Guid>("FacilitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OffersId")
                        .HasColumnType("char(36)");

                    b.HasKey("FacilitiesId", "OffersId");

                    b.HasIndex("OffersId");

                    b.ToTable("FacilityOffer");
                });

            modelBuilder.Entity("FlightOfferPackage", b =>
                {
                    b.Property<Guid>("FlightOffersId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("char(36)");

                    b.HasKey("FlightOffersId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("FlightOfferPackage");
                });

            modelBuilder.Entity("HotelOfferPackage", b =>
                {
                    b.Property<Guid>("HotelOffersId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("char(36)");

                    b.HasKey("HotelOffersId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("HotelOfferPackage");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("FaxNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Images.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.ToTable("Offers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Offer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Packages.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<bool>("IsSingleOffer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.Reserve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PackageId");

                    b.ToTable("Reserves");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Reserve");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Reactions.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ReactionState")
                        .HasColumnType("int");

                    b.Property<Guid>("TouristId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TouristId");

                    b.HasIndex("OfferId", "TouristId")
                        .IsUnique();

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Excursion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Excursions");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("char(36)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OriginId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OriginId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("TouristPlaceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TouristPlaceId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.TouristActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TouristActivities");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.TouristPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TouristPlaces");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.ExcursionOffer", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Offers.Offer");

                    b.Property<Guid>("ExcursionId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ExcursionId");

                    b.HasDiscriminator().HasValue("ExcursionOffer");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.FlightOffer", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Offers.Offer");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("char(36)");

                    b.HasIndex("FlightId");

                    b.HasDiscriminator().HasValue("FlightOffer");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.HotelOffer", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Offers.Offer");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.HasIndex("HotelId");

                    b.HasDiscriminator().HasValue("HotelOffer");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.PaymentOnline", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Payments.Payment");

                    b.Property<long>("CreditCard")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("PaymentOnline");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.PaymentTicket", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Payments.Payment");

                    b.HasDiscriminator().HasValue("PaymentTicket");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.ReserveTicket", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Payments.Reserve");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ReserveTicket");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.ReserveTourist", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Payments.Reserve");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ReserveTourist");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.Tourist", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Users.User");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Tourist");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.UserAgency", b =>
                {
                    b.HasBaseType("Travel_Agency_Domain.Users.User");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("char(36)");

                    b.HasIndex("AgencyId");

                    b.HasDiscriminator().HasValue("UserAgency");
                });

            modelBuilder.Entity("ExcursionHotel", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Services.Excursion", null)
                        .WithMany()
                        .HasForeignKey("OverNightExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcursionOfferPackage", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Offers.ExcursionOffer", null)
                        .WithMany()
                        .HasForeignKey("ExcursionOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Packages.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcursionTouristActivity", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.TouristActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Services.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcursionTouristPlace", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Services.TouristPlace", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityOffer", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Offers.Offer", null)
                        .WithMany()
                        .HasForeignKey("OffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightOfferPackage", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Offers.FlightOffer", null)
                        .WithMany()
                        .HasForeignKey("FlightOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Packages.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelOfferPackage", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Offers.HotelOffer", null)
                        .WithMany()
                        .HasForeignKey("HotelOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Packages.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.Offer", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.Payment", b =>
                {
                    b.OwnsOne("Travel_Agency_Domain.Others.UserIdentity", "UserIdentity", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("IdentityDocument")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("UserIdentity")
                        .IsRequired();
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.Reserve", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Packages.Package", "Package")
                        .WithMany("Reserves")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Travel_Agency_Domain.Others.UserIdentity", "UserIdentities", b1 =>
                        {
                            b1.Property<Guid>("ReserveId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("IdentityDocument")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ReserveId", "Id");

                            b1.ToTable("Reserves_UserIdentities");

                            b1.WithOwner()
                                .HasForeignKey("ReserveId");
                        });

                    b.Navigation("Package");

                    b.Navigation("UserIdentities");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Reactions.Reaction", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Offers.Offer", "Offer")
                        .WithMany("Reactions")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Users.Tourist", "Tourist")
                        .WithMany("Reactions")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Excursion", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Flight", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.TouristPlace", "Destination")
                        .WithMany("DestinationFlights")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Services.TouristPlace", "Origin")
                        .WithMany("OriginFlights")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Hotel", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Services.TouristPlace", "TouristPlace")
                        .WithMany("Hotels")
                        .HasForeignKey("TouristPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("TouristPlace");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.TouristActivity", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.TouristPlace", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Travel_Agency_Domain.Others.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("TouristPlaceId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("TouristPlaceId");

                            b1.ToTable("TouristPlaces");

                            b1.WithOwner()
                                .HasForeignKey("TouristPlaceId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.ExcursionOffer", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Excursion", "Excursion")
                        .WithMany("Offers")
                        .HasForeignKey("ExcursionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excursion");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.FlightOffer", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Flight", "Flight")
                        .WithMany("Offers")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.HotelOffer", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Services.Hotel", "Hotel")
                        .WithMany("Offers")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.ReserveTicket", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Payments.PaymentTicket", "Payment")
                        .WithMany("ReserveTickets")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Users.UserAgency", "User")
                        .WithMany("Reserves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.ReserveTourist", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Payments.PaymentOnline", "Payment")
                        .WithMany("ReserveTourists")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel_Agency_Domain.Users.Tourist", "User")
                        .WithMany("Reserves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.UserAgency", b =>
                {
                    b.HasOne("Travel_Agency_Domain.Agency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Agency", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Offers.Offer", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Packages.Package", b =>
                {
                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Excursion", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Flight", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.Hotel", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Services.TouristPlace", b =>
                {
                    b.Navigation("DestinationFlights");

                    b.Navigation("Hotels");

                    b.Navigation("OriginFlights");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.PaymentOnline", b =>
                {
                    b.Navigation("ReserveTourists");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Payments.PaymentTicket", b =>
                {
                    b.Navigation("ReserveTickets");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.Tourist", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("Travel_Agency_Domain.Users.UserAgency", b =>
                {
                    b.Navigation("Reserves");
                });
#pragma warning restore 612, 618
        }
    }
}
